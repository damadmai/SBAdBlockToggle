#!/bin/bash
#/*
 #* com.nathulal.AdBlockToggle.patchhelper
 #* 
 #* Copyright (c) 2009 nathulal <inathulal at gmail.com>. All rights reserved.
 #* 
 #* This file is part of iPhoneAdBlockToggle.
 #* 
 #* iPhoneAdBlockToggle is free software: you can redistribute it and/or modify
 #* it under the terms of the GNU General Public License as published by
 #* the Free Software Foundation, either version 3 of the License, or
 #* (at your option) any later version.
 #* 
 #* iPhoneAdBlockToggle is distributed in the hope that it will be useful,
 #* but WITHOUT ANY WARRANTY; without even the implied warranty of
 #* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #* GNU General Public License for more details.
 #* 
 #* You should have received a copy of the GNU General Public License
 #* along with iPhoneAdBlockToggle.  If not, see <http://www.gnu.org/licenses/>.
 #*/
 
m_username=`whoami|grep .`
if [ "$m_username" != "root" ]
then
	echo "You must be logged in as root."
	exit
fi;

if [ ! -f /tmp/AdBlock-patchhelper.pid ]
then

	echo "Patching adblock checking apps ..." > /tmp/AdBlock-patchhelper.pid

	echo "Begin patching ..."

	if [ -f /Applications/SBSettings.app/SBSettings ]
	then
		echo "Patching SBSettings ..."
		killall SBSettings
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/SBSettings.app/SBSettings
		ldid -S /Applications/SBSettings.app/SBSettings
		echo "Patched SBSettings"
	fi;
	
		if [ -f /Applications/SBSettings.app/SBSettings2 ]
	then
		echo "Patching SBSettings2 ..."
		killall SBSettings2
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/SBSettings.app/SBSettings2
		ldid -S /Applications/SBSettings.app/SBSettings2
		echo "Patched SBSettings2"
	fi;

	if [ -f /Applications/Categories.app/Categories ]
	then
		echo "Patching Categories ..."
		killall Categories
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Categories.app/Categories
		ldid -S /Applications/Categories.app/Categories
		echo "Patched Categories"
	fi;

	if [ -f /Applications/Categories.app/Categories2 ]
	then
		echo "Patching Categories ..."
		killall Categories
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Categories.app/Categories2
		ldid -S /Applications/Categories.app/Categories2
		echo "Patched Categories"
	fi;

if [ -f /Applications/Categories.app/Categories3 ]
	then
		echo "Patching Categories ..."
		killall Categories
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Categories.app/Categories3
		ldid -S /Applications/Categories.app/Categories3
		echo "Patched Categories"
	fi;
	
	if [ -f /Applications/Lockdown.app/Lockdown ]
	then
		echo "Patching Lockdown ..."
		killall Lockdown
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Lockdown.app/Lockdown
		ldid -S /Applications/Lockdown.app/Lockdown
		echo "Patched Lockdown"
	fi;

	if [ -f /Applications/Lockdown.app/Lockdown_exec ]
	then
		echo "Patching Lockdown ..."
		killall Lockdown
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Lockdown.app/Lockdown_exec
		ldid -S /Applications/Lockdown.app/Lockdown_exec
		echo "Patched Lockdown"
	fi;
	
	if [ -f /Applications/BossPrefs.app/BossPrefs ]
	then
		echo "Patching BossPrefs ..."
		killall BossPrefs
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/BossPrefs.appBossPrefs
		ldid -S /Applications/BossPrefs.app/BossPrefs
		echo "Patched BossPrefs"
	fi;
	
	if [ -f /Applications/BossPaper.app/BossPaper ]
	then
		echo "Patching BossPaper ..."
		killall BossPaper
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/BossPaper.app/BossPaper
		ldid -S /Applications/BossPaper.app/BossPaper
		echo "Patched BossPaper"
	fi;
	
	if [ -f /Applications/Docs.app/Docs2 ]
	then
		echo "Patching Docs2 ..."
		killall Docs2
		/var/mobile/Library/SBSettings/Toggles/AdBlock/patchhelper /Applications/Docs.app/Docs2
		ldid -S /Applications/Docs.app/Docs2
		echo "Patched Docs2"
	fi;
	
	if [ -f /Applications/biteSMS.app/emusic.png ]
	then
		echo "Patching biteSMS ..."
		killall biteSMS
		mv /Applications/biteSMS.app/emusic.png /Applications/biteSMS.app/emuzic.png
		mv /Applications/biteSMS.app/emusic-landscape.png /Applications/biteSMS.app/emuzic-landscape.png
		mv /var/mobile/Library/SBSettings/Toggles/AdBlock/bitesms/emusic.png /Applications/biteSMS.app/emusic.png
		echo "Patched biteSMS"
	fi;

	if [ ! -f /Applications/biteSMS.app/biteSMS/English.lproj/biteSMS.strings.orig ]
	then
		cp /Applications/biteSMS.app/English.lproj/biteSMS.strings /Applications/biteSMS.app/English.lproj/biteSMS.strings.orig
	fi;

	if [ -f /Applications/biteSMS.app/biteSMS ]
	then
		echo "Patching biteSMS ..."
		killall biteSMS
		find /Applications/biteSMS.app/English.lproj -type f -name "biteSMS.strings" | while read FILENAME; do sed -e "s@<string>biteSMS</string>@<string>ModYouri.com</string>@ig" $FILENAME > /tmp/tempbitestring.tmp; mv /tmp/tempbitestring.tmp $FILENAME; done
		find /Applications/biteSMS.app/English.lproj -type f -name "biteSMS.strings" | while read FILENAME; do sed -e "s@<string>Thanks for supporting us\!</string>@<string>your iPhone, modified</string>@ig" $FILENAME > /tmp/tempbitestrings.tmp; mv /tmp/tempbitestrings.tmp $FILENAME; done
		echo "Patched biteSMS"
	fi;
	
	rm /tmp/AdBlock-patchhelper.pid
	echo "Done. If you have trouble launching a patched app reload the SpringBoard and then try patching again."
fi;

## START REMOVE BUILT IN ADS ##

# SourceM
if [ -f /User/Applications/*/SourceM.app/banner.png ]
	then
find /User/Applications/*/SourceM.app -type f -name "banner.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# The Weather Channel
if [ -f /User/Applications/*/TWC.app/defaultAd.jpg ]
	then
find /User/Applications/*/TWC.app -type f -name "defaultAd.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# VLC Remote Free
if [ -f /User/Applications/*/VLCRemFree.app/iAdBackup320_50.png ]
	then
find /User/Applications/*/VLCRemFree.app -type f -name "iAdBackup320_50.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/VLCRemFree.app -type f -name "iAdBackup320_50@2x.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/VLCRemFree.app -type f -name "iAdBackup480_32.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/VLCRemFree.app -type f -name "iAdBackup480_32@2x.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# 3D Wallpapers
if [ -f /User/Applications/*/Wall_papers.app/Full_Virsion_1.png ]
	then
find /User/Applications/*/Wall_papers.app -type f -name "Full_Virsion_1.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/Wall_papers.app -type f -name "Full_Virsion_7.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/Wall_papers.app -type f -name "Full_Virsion_Small.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# TextFree Unlimited
if [ -f /User/Applications/*/Textfree.app/Textfree ]
	then
find /User/Applications/*/Textfree.app -type f -name "Textfree" | while read FILENAME; do NEWNAME1="${FILENAME/\/Textfree.app\/Textfree//Documents/default_ad.png}"; NEWNAME2=${NEWNAME1%.*}.bak;mv "${NEWNAME1}" "${NEWNAME2}"; done
fi;
if [ -d /User/Applications/*/Textfree.app/SC_Info ]
	then
# empty the directory thats not empty
find /User/Applications/*/Textfree.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/Textfree.app\/SC_Info//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
#mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

# TextFree With Voice
if [ -d /User/Applications/*/Library/Caches/Snapshots/com.pinger.textfreeWithVoice ]
	then
# empty the directory thats not empty
find /User/Applications/*/Library/Caches/Snapshots -type d -name "com.pinger.textfreeWithVoice" | while read FILENAME; do NEWNAME="${FILENAME/\/Library\/Caches\/Snapshots\/com.pinger.textfreeWithVoice//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
#mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

# TextNow Unlimited
if [ -f /User/Applications/*/UnlimitedSMS.app/housead.png ]
	then
find /User/Applications/*/UnlimitedSMS.app -type f -name "housead.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/UnlimitedSMS.app -type f -name "adbg.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/UnlimitedSMS.app -type f -name "adbg_white.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;
if [ -d /User/Applications/*/UnlimitedSMS.app/SC_Info ]
	then
# empty the directory thats not empty
find /User/Applications/*/UnlimitedSMS.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/UnlimitedSMS.app\/SC_Info//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
#mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

# Cliffed Free
if [ -f /User/Applications/*/CliffedFree.app/Cliffed_216.png ]
	then
find /User/Applications/*/CliffedFree.app -type f -name "Cliffed_216.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Cliffed_216_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Cliffed_300.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Cliffed_300_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Escape_216.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Escape_216_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Escape_300.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Escape_300_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Implode\!_216.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Implode\!_216_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Implode\!_300.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "Implode\!_300_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "iugo_games_216.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "iugo_games_216_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "iugo_games_300.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "iugo_games_300_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "ZA2\!_216.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "ZA2\!_216_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "ZA2\!_300.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "ZA2\!_300_2.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/CliffedFree.app -type f -name "IUGO_Logo.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}-.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# Cliffed Free
if [ -f /User/Applications/*/CliffedFree.app/CliffedFree ]
	then
find /User/Applications/*/CliffedFree.app -type f -name "CliffedFree" | while read FILENAME; do NEWNAME1="${FILENAME/\/CliffedFree.app\/CliffedFree//Documents/1.dat}"; NEWNAME2=${NEWNAME1%.*}.bak;mv "${NEWNAME1}" "${NEWNAME2}"; done
fi;

# NYTimes
if [ -f /User/Applications/*/NYTimes.app/NYTimes ]
	then
find /User/Applications/*/NYTimes.app -type f -name "ad.html" | while read FILENAME; do NEWNAME=${FILENAME}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/NYTimes.app -type f -name "ad.js" | while read FILENAME; do NEWNAME=${FILENAME}.bak; mv ${FILENAME} ${NEWNAME}; done
# empty the directory thats not empty
find /User/Applications/*/NYTimes.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/NYTimes.app\/SC_Info//Library/Caches/ads}"; rm -rf "${NEWNAME}"; done
fi;

# HaCheoli
if [ -f /User/Applications/*/HaCheoli.app/cauly_default_banner.png ]
	then
find /User/Applications/*/HaCheoli.app -type f -name "cauly_default_banner.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/HaCheoli.app -type f -name "DefaultBanner.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# Flixster
if [ -f /User/Applications/*/Flixster.app/Flixster ]
	then
# empty the directory thats not empty
find /User/Applications/*/Flixster.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/Flixster.app\/SC_Info//Library/Application Support/Flixster/ads}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

# Simplenote START
if [ ! -f /User/Applications/*/Simplenote.app/Simplenote_ ]
	then
	 find /User/Applications/*/Simplenote.app -type f -name "Info.plist" | while read FILENAME; do
	 cp $FILENAME /var/tmp/Simplenote.plist;
	 # change key value in plist
	 plutil -key CFBundleExecutable -value Simplenote_ /var/tmp/Simplenote.plist;
	 mv /var/tmp/Simplenote.plist $FILENAME; done

# create new exec file
printf '#!/bin/bash \nfind /User/Applications/*/Simplenote.app -type f -name \"Simplenote\" | while read FILENAME; do NEWNAME=\"${FILENAME/\\/Simplenote.app\\/Simplenote//Library/Preferences/com.codality.NotationalFlow.plist}\"; plutil -key showAds -0 ${NEWNAME}; chmod 755 ${NEWNAME}; chown mobile:mobile ${NEWNAME}; done \nPath=$(dirname "$0") \nexec "${Path}"/Simplenote \n' > /var/tmp/Simplenote_;

# copy new exec file to proper location
find /User/Applications/*/Simplenote.app -type f -name "Simplenote" | while read FILENAME; do NEWNAME=${FILENAME}_; mv /var/tmp/Simplenote_ ${NEWNAME}; chmod 755 $NEWNAME; chown mobile:mobile $NEWNAME;
 ldid -s "$NEWNAME";  done
fi;
# Simplenote END

# Quick News UK
if [ -f /User/Applications/*/Quick\ News\ UK\ Free.app/DownloadRSSFlashgForOtherApp.png ]; 
	then 
	find /User/Applications/*/Quick\ News\ UK\ Free.app/DownloadRSSFlashgForOtherApp.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done; 
fi;

# CinePlex
if [ -f /User/Applications/*/Cineplex.app/English.lproj/tickets_mobile_320x50_v2.jpg ]
	then
find /User/Applications/*/Cineplex.app/English.lproj -type f -name "tickets_mobile_320x50_v2.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/Cineplex.app/French.lproj -type f -name "tickets_mobile_320x50_v2.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
fi;

# HeyWire
if [ -f /User/Applications/*/HeyWire*.app/HeyWire ]
	then
find /User/Applications/*/HeyWire*.app -type f -name "banner-bg.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/HeyWire*.app -type f -name "banner-bg@2x.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/HeyWire*.app -type f -name "SmaatoBackground.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/HeyWire*.app -type f -name "SmaatoFooter.png" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/Library/Preferences -type f -name "com.mediafriendsinc.iWire.plist" | while read FILENAME; do cp $FILENAME /private/var/tmp/iWire.plist; chmod 755 /private/var/tmp/iWire.plist; plutil -convert xml1 /private/var/tmp/iWire.plist; sed -e "s@<string>iad,smaato</string>@<string></string>@ig" /tmp/iWire.plist > /tmp/iWire2.plist; plutil -convert binary1 /tmp/iWire2.plist; mv /tmp/iWire2.plist $FILENAME; chmod 755 $FILENAME; done
fi;

#################### ESPN APPS START ####################

( exec /private/var/mobile/Library/SBSettings/Commands/adblock_espn/espn_adblock.sh )
while [ -f /tmp/wait_on_espn ]
	do
	echo "waiting for ESPN script to finish"
done

#################### ESPN APPS END ####################

# PagesJaunes
if [ -f /User/Applications/*/PagesJaunes.app/fond_loader_pub0.jpg ]
	then
find /User/Applications/*/PagesJaunes.app -type f -name "fond_loader_pub0.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/PagesJaunes.app -type f -name "fond_loader_pub1.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/PagesJaunes.app -type f -name "fond_loader_pub2.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/PagesJaunes.app -type f -name "fond_loader_pub3.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
find /User/Applications/*/PagesJaunes.app -type f -name "fond_loader_pub4.jpg" | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv ${FILENAME} ${NEWNAME}; done
fi;
if [ -d /User/Applications/*/PagesJaunes.app/SC_Info ]; 
	then 
# empty the directory thats not empty
find /User/Applications/*/PagesJaunes.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/PagesJaunes.app\/SC_Info//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
#mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

# Morandini
if [ -f /User/Applications/*/JMM.com.app/ban_iphone.png ]; 
	then 
	find /User/Applications/*/JMM.com.app/ban_iphone.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done; 
	find /User/Applications/*/JMM.com.app/ban_iphoneV2.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done; 
fi;

# Words With Friends Free
if [ -f /User/Applications/*/WordsWithFriendsFree.app/ui_bottom_texture.png ]; 
	then 
	find /User/Applications/*/WordsWithFriendsFree.app/ui_bottom_texture.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done
	find /User/Applications/*/WordsWithFriendsFree.app/ui_bottom_texture@2x.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done
# empty the directory thats not empty
find /User/Applications/*/WordsWithFriendsFree.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/WordsWithFriendsFree.app\/SC_Info//Library/Caches/admob}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ; done
 # empty the directory thats not empty
find /User/Applications/*/WordsWithFriendsFree.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/WordsWithFriendsFree.app\/SC_Info//Library/Caches/Burstly}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ; done
  # empty the directory thats not empty
find /User/Applications/*/WordsWithFriendsFree.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/WordsWithFriendsFree.app\/SC_Info//Library/Caches/Flurry}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ; done
  # empty the directory thats not empty
find /User/Applications/*/WordsWithFriendsFree.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/WordsWithFriendsFree.app\/SC_Info//Library/Medialets/MMAdCache}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ; done
fi;

# Chess With Friends Free
if [ -f /User/Applications/*/ChessWithFriends.app/remove_ads.png ]; 
	then 
	find /User/Applications/*/ChessWithFriends.app/remove_ads.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done
# empty the directory thats not empty
find /User/Applications/*/ChessWithFriends.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/ChessWithFriends.app\/SC_Info//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}";
# chmod 555 "${NEWNAME}" ;
done
# empty the directory thats not empty
find /User/Applications/*/ChessWithFriends.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/ChessWithFriends.app\/SC_Info//Documents/GSContent}"; rm -rf "${NEWNAME}";
# create directory with read access only
mkdir "${NEWNAME}";
# chmod 555 "${NEWNAME}" ;
done
fi;

# myYearbook
if [ -f /User/Applications/*/MyYearbook.app/blank_ad.png ]; 
	then 
	find /User/Applications/*/MyYearbook.app/blank_ad.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done
	find /User/Applications/*/MyYearbook.app/blank_ad@2x.png | while read FILENAME; do NEWNAME=${FILENAME%.*}.bak; mv "${FILENAME}" "${NEWNAME}"; done
fi;
if [ -d /User/Applications/*/MyYearbook.app/SC_Info ]; 
	then 
# empty the directory thats not empty
find /User/Applications/*/MyYearbook.app -type d -name "SC_Info" | while read FILENAME; do NEWNAME="${FILENAME/\/MyYearbook.app\/SC_Info//Library/Caches}"; rm -rf "${NEWNAME}";
# create directory with read access only
#mkdir "${NEWNAME}"; chmod 555 "${NEWNAME}" ;
done
fi;

## END REMOVE BUILT IN ADS ##

#################### BiteSMS to Messages Icon START ####################

if [ -f /Applications/biteicontosms/bitesms_to_messages-inst.sh ]; 
	then 
( exec /Applications/biteicontosms/bitesms_to_messages-inst.sh )
while [ -f /tmp/bitetosms ]
	do
	echo "waiting for bitetosms script to finish"
done
fi;

#################### BiteSMS to Messages Icon END ####################

# check/write permissions to /etc/sudoers
if [ $(grep -c '%mobile ALL=(ALL) NOPASSWD: /bin/mv' /etc/sudoers) -ne 0 ]
	then echo "FOUND"; 
	else echo '%mobile ALL=(ALL) NOPASSWD: /bin/mv' >> /etc/sudoers
fi;
if [ $(grep -c '%mobile ALL=(ALL) NOPASSWD: /bin/cp' /etc/sudoers) -ne 0 ]
	then echo "FOUND"; 
	else echo '%mobile ALL=(ALL) NOPASSWD: /bin/cp' >> /etc/sudoers
fi;
if [ $(grep -c '%mobile ALL=(ALL) NOPASSWD: /bin/sed' /etc/sudoers) -ne 0 ]
	then echo "FOUND"; 
	else echo '%mobile ALL=(ALL) NOPASSWD: /bin/sed' >> /etc/sudoers
fi;
if [ $(grep -c '%mobile ALL=(ALL) NOPASSWD: /bin/rm' /etc/sudoers) -ne 0 ]
	then echo "FOUND"; 
	else echo '%mobile ALL=(ALL) NOPASSWD: /bin/rm' >> /etc/sudoers
fi;
# check/write permissions to /etc/sudoers

respring
 